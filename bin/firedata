#!/usr/bin/env node

/*
 * @Author: Ridwan Abadi
 * @Date:   2015-10-22 15:22:55
 * @Last Modified by:   Ridwan Abadi
 * @Last Modified time: 2015-10-22 18:13:20
 */

(function() {

    'use strict';

    /**
     * firedata
     * @type {Object}
     */
    var firedata = {}

    /**
     * Chalk Utility
     * @type {Object}
     */
    var chalk = require('chalk');

    /**
     * Chalk Utility
     * @type {Object}
     */
    var _ = require('lodash');

    /**
     * File System Utility
     * @type {Object}
     */
    var fs = require('fs-extra-promise')

    /**
     * Traverse Utility
     * @type {Object}
     */
    var traverse = require('traverse-async').traverse

    /**
     * [traverseSync description]
     * @type {[type]}
     */
    var traverseSync = require('traverse')

    /**
     * Argument passed by user
     * @type {Array}
     */
    var args = process.argv.slice(2);

    /**
     * working derectory
     * @type {String}
     */
    var workingDir = process.cwd();

    /**
     * [log description]
     * @param  {[type]} text [description]
     * @return {[type]}      [description]
     */
    var log = function(text, raw) {

        return (!raw) ? console.log(chalk.red.bold('Firedata:: ' + chalk.white(text))) : console.log(text)
    }

    /**
     * [run description]
     * @return {[type]} [description]
     */
    firedata.run = function() {

        log('Running..')

        firedata.path(workingDir + '/' + args[0])

        .then(function(config) {

            log('Path "' + config + '" found')

            return firedata.build(require(config))

        }).then(function(data) {

            var targetFile = args[1]

            return [targetFile, fs.outputJson(targetFile, data)]

        }).then(function(output) {

            log('File "' + output[0] + '" created')
        
        }).catch(function(err) {

            console.log(chalk.red.bold('Error:: '))

            console.log(err)
        })
    }

    /**
     * [path description]
     * @param  {[type]} argument [description]
     * @return {[type]}          [description]
     */
    firedata.path = function(path) {

        return fs.realpathAsync(path)
    }

    /**
     * [build description]
     * @param  {[type]} obj [description]
     * @return {[type]}     [description]
     */
    firedata.build = function(obj) {

        return new Promise(function(resolve, reject) {

            var targetFile = args[1]

            /**
             * @param {[type]}
             * @param {[type]}
             * @param {[type]}
             */
            function setValueToObject(object, key, value) {

                var node = object;

                var i = 1

                key.map(function(item, index) {

                    (node[item]) ? '' : node[item] = {}

                    if (i === _.size(key)) {

                        node[item] = value

                    } else {

                        node = node[item]
                    }

                    i++
                })
            }

            /**
             * @param  {[type]}
             * @return {[type]}
             */
            function walkConfig(config) {

                return new Promise(function(resolve, reject) {

                    var data = {}

                    /**
                     * @param  {[type]}
                     * @return {[type]}
                     */
                    function walk(config) {

                        traverse(config, function(value, next) {

                          var key
                          var parent
                          var path;
                          var context = this

                          if (typeof value === 'function') {

                            setValueToObject(data, context.path, value())

                            next()

                          } else if (typeof value.then === 'function') {

                            value.then(function (result){
                                
                                setValueToObject(data, context.path, result)

                                next()
                            })

                          } else {

                            setValueToObject(data, context.path, value)

                            next()
                          }

                        }, function() {

                            if (checkStatusWalk(data)) {

                                walk(data)

                            } else {

                                resolve(data)
                            }
                        })
                    }

                    /**
                     * @param  {[type]}
                     * @return {[type]}
                     */
                    function checkStatusWalk(config) {

                        var status = false

                        traverseSync(config).map(function(item) {

                            if (status) {

                                return true
                            }

                            var context = this

                            if (context.isLeaf) {

                                if(item && (typeof item === 'function' || typeof item.then === 'function')) {

                                    status = true
                                }
                            }        
                        })

                        return status
                    }

                    if (checkStatusWalk(config)) {

                        walk(config)
                    }
                })
            }

            var promises = {}

            var data = {}

            walkConfig(obj).then(function(data){

                resolve(data)
            })
        })
    }

    return firedata.run()

}).call(this)
